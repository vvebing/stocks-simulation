{"version":3,"sources":["Dashboard.js"],"names":["Dashboard","props","getOption","myChart","trades","latestData","length","buy","stock","option","grid","left","right","top","bottom","containLabel","title","text","STOCK","tooltip","trigger","axisPointer","type","lineStyle","width","xAxis","boundaryGap","data","Array","fill","map","_","index","yAxis","showMinLabel","showMaxLabel","min","value","parseInt","max","series","name","slice","markPoint","setOption","onBuyInputChange","setState","buyValue","onBuyBtnMax","state","maxBuy","onSellInputChange","sellValue","onSellBtnMax","position","onBuyBtnClick","warning","tradeConfirm","onSellBtnClick","onKeepBtnClick","amount","action","handleTrade","over","confirm","centered","okText","cancelText","content","onOk","next","toggleNext","inputFormatter","calc","averageCost","totalProfit","balance","marketValue","totalAsset","currentProfit","toFixed","lineRef","createRef","this","echarts","getInstanceByDom","current","undefined","init","prevProps","dispose","handleNext","id","bordered","column","Item","label","onClick","className","ref","justify","span","size","block","step","precision","formatter","onChange","danger","nextProps","prevState","PureComponent"],"mappings":"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","file":"static/js/12.11aeba52.chunk.js","sourcesContent":["import React, { createRef, PureComponent } from 'react';\nimport echarts from 'echarts/lib/echarts';\nimport 'echarts/lib/chart/line';\nimport 'echarts/lib/component/title';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/markPoint';\nimport { Button, Col, Descriptions, InputNumber, message, Modal, Row } from 'antd';\n\nimport data from './data.json';\nimport { calc, STOCK } from './App';\n\nexport default class Dashboard extends PureComponent {\n  constructor(props) {\n    super(props);\n    const { trades } = props;\n    const latestData = trades[trades.length - 1] || {};\n    const {\n      averageCost = 0,\n      position = 0,\n      totalProfit = 0,\n      balance = 0,\n      marketValue = 0,\n      totalAsset = 0,\n      maxBuy = 0,\n    } = calc(latestData);\n    const currentProfit = (data[latestData.stock][latestData.buy.length + 3] - averageCost) * position;\n    this.state = {\n      over: latestData.buy && latestData.buy.length >= 20,\n      buyValue: 0,\n      sellValue: 0,\n      averageCost: averageCost.toFixed(4),    // 加权成本\n      position,       // 持仓\n      currentProfit: currentProfit.toFixed(4),  // 当前盈亏\n      totalProfit: totalProfit.toFixed(4),    // 总盈亏\n      balance: balance.toFixed(4),        // 现金余额\n      marketValue: marketValue.toFixed(4),    // 股票市值\n      totalAsset: totalAsset.toFixed(4),     // 总资产\n      maxBuy,\n      trades,\n      next: false,\n    };\n    this.lineRef = createRef();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { trades } = nextProps;\n    if (prevState.trades !== trades) {\n      const latestData = trades[trades.length - 1];\n      const {\n        averageCost = 0,\n        position = 0,\n        totalProfit = 0,\n        balance = 0,\n        marketValue = 0,\n        totalAsset = 0,\n        maxBuy = 0,\n      } = calc(latestData);\n      const currentProfit = (data[latestData.stock][latestData.buy.length + 3] - averageCost) * position;\n      return {\n        averageCost: averageCost.toFixed(4),\n        position,\n        currentProfit: currentProfit.toFixed(4),\n        totalProfit: totalProfit.toFixed(4),\n        balance: balance.toFixed(4),\n        marketValue: marketValue.toFixed(4),\n        totalAsset: totalAsset.toFixed(4),\n        maxBuy,\n        trades,\n      };\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    const { over } = this.state;\n    if (over) return;\n\n    this.myChart = echarts.getInstanceByDom(this.lineRef.current);\n    if (this.myChart === undefined) {\n      this.myChart = echarts.init(this.lineRef.current);\n    }\n    this.getOption();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { trades } = this.props;\n    if (trades !== prevProps.trades) {\n      this.getOption();\n    }\n  }\n\n  componentWillUnmount() {\n    this.myChart && this.myChart.dispose();\n    this.myChart = null;\n  }\n\n  getOption = () => {\n    if (!this.myChart) return;\n    const { trades } = this.props;\n    const latestData = trades[trades.length - 1];\n    if (!latestData) return;\n    const { buy, stock } = latestData;\n\n    const option = {\n      grid: {\n        left: '0',\n        right: '10px',\n        top: '35px',\n        bottom: '0',\n        containLabel: true,\n      },\n      title: {\n        text: `${STOCK[stock]}股票走势`,\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'line',\n          lineStyle: {\n            width: 1.5,\n            type: 'dashed',\n          },\n        },\n      },\n      xAxis: {\n        boundaryGap: false,\n        data: Array(22).fill('').map((_, index) => `Point ${index}`),\n      },\n      yAxis: {\n        showMinLabel: false,\n        showMaxLabel: false,\n        min: (value) => parseInt(value.min - 1, 10),\n        max: (value) => parseInt(value.max + 2, 10),\n      },\n      series: [\n        {\n          name: '股票价格',\n          type: 'line',\n          data: data[stock].slice(3, buy.length + 4),\n          markPoint: {\n            data: [\n              { type: 'min', name: '最低值' },\n              { type: 'max', name: '最高值' },\n            ],\n          },\n        }\n      ],\n    };\n    this.myChart.setOption(option);\n  }\n\n  onBuyInputChange = (value) => {\n    this.setState({ buyValue: +value });\n  }\n\n  onBuyBtnMax = () => {\n    this.setState((state) => ({ buyValue: state.maxBuy }));\n  }\n\n  onSellInputChange = (value) => {\n    this.setState({ sellValue: +value });\n  }\n\n  onSellBtnMax = () => {\n    this.setState((state) => ({ sellValue: state.position }));\n  }\n\n  onBuyBtnClick = () => {\n    const { buyValue, maxBuy } = this.state;\n    if (!buyValue) return message.warning('买入数量需大于零！');\n    if (buyValue > maxBuy) {\n      this.setState({ buyValue: maxBuy });\n      return message.warning(`现金余额最多只能购买${maxBuy}股！`);\n    };\n    this.tradeConfirm('buy', buyValue, `买入${buyValue}股`);\n  }\n\n  onSellBtnClick = () => {\n    const { sellValue, position } = this.state;\n    if (!sellValue) return message.warning('卖出数量需大于零！');\n    if (sellValue > position) {\n      this.setState({ sellValue: position });\n      return message.warning(`当前持仓最多只能卖出${position}股！`);\n    }\n    this.tradeConfirm('sell', sellValue, `卖出${sellValue}股`);\n  }\n\n  onKeepBtnClick = () => {\n    this.tradeConfirm('', 0, '继续持有');\n  }\n\n  tradeConfirm = (option, amount, action) => {\n    const { trades, handleTrade } = this.props;\n    const latestData = trades[trades.length - 1];\n    if (latestData.buy.length >= 20) {\n      return this.setState({ over: true });\n    }\n    Modal.confirm({\n      centered: true,\n      okText: '确定',\n      cancelText: '取消',\n      title: `${action}${STOCK[latestData.stock]}股票`,\n      content: '是否确认该操作？',\n      onOk: () => {\n        this.setState({\n          buyValue: 0,\n          sellValue: 0,\n          next: true,\n        });\n        handleTrade(option, amount);\n      },\n    });\n  }\n\n  toggleNext = () => {\n    const { trades } = this.props;\n    const latestData = trades[trades.length - 1];\n    this.setState({ next: false, over: latestData.buy.length >= 20 });\n  }\n\n  inputFormatter = (value) => parseInt(value, 10) || 0;\n\n  render() {\n    const { trades, handleNext } = this.props;\n    const {\n      over,\n      next,\n      buyValue,\n      sellValue,\n      averageCost,\n      position,\n      currentProfit,\n      totalProfit,\n      balance,\n      marketValue,\n      totalAsset,\n    } = this.state;\n    const latestData = trades[trades.length - 1] ?? {};\n    const { stock, buy } = latestData;\n\n    return over ? (\n      <div id=\"dashboard\">\n        <h2>本轮交易任务结束。</h2>\n        <Descriptions bordered column={1}>\n          <Descriptions.Item label=\"成本\">{+averageCost}</Descriptions.Item>\n          <Descriptions.Item label=\"持仓\">{position}</Descriptions.Item>\n          <Descriptions.Item label=\"总盈亏\">{+totalProfit}</Descriptions.Item>\n          <Descriptions.Item label=\"现金余额\">{+balance}</Descriptions.Item>\n          <Descriptions.Item label=\"股票市值\">{+marketValue}</Descriptions.Item>\n          <Descriptions.Item label=\"总资产\">{+totalAsset}</Descriptions.Item>\n        </Descriptions>\n        <h2>{`您在本轮交易任务的累计盈亏为：${+totalProfit}金币。`}</h2>\n        <Button type=\"primary\" onClick={handleNext}>点击继续</Button>\n      </div>\n    ) : (\n      <div id=\"dashboard\">\n        <div className=\"chart\" ref={this.lineRef} />\n        <div className=\"data\">\n          <div className=\"describe\">\n            <Descriptions bordered column={1} title=\"资产配置\">\n              <Descriptions.Item label=\"当前股价\">{data[stock][buy.length + 3]}</Descriptions.Item>\n              <Descriptions.Item label=\"成本\">{+averageCost}</Descriptions.Item>\n              <Descriptions.Item label=\"持仓\">{position}</Descriptions.Item>\n              <Descriptions.Item label=\"当前盈亏\">{+currentProfit}</Descriptions.Item>\n              <Descriptions.Item label=\"总盈亏\">{+totalProfit}</Descriptions.Item>\n              <Descriptions.Item label=\"现金余额\">{+balance}</Descriptions.Item>\n              <Descriptions.Item label=\"股票市值\">{+marketValue}</Descriptions.Item>\n              <Descriptions.Item label=\"总资产\">{+totalAsset}</Descriptions.Item>\n            </Descriptions>\n          </div>\n          <div className=\"option\">\n            {\n              next ?\n              <>\n                <Row justify=\"center\">\n                  <Col className=\"input-label\">\n                    {\n                      latestData.buy.length >= 20 ?\n                      '本轮交易任务结束，点击确认查看本轮交易信息。' :\n                      '本期交易结束，请点击确认进入下一个交易期！'\n                    }\n                  </Col>\n                </Row>\n                <Row justify=\"center\">\n                  <Col span={12}>\n                    <Button\n                      type=\"primary\"\n                      size=\"large\"\n                      block\n                      onClick={this.toggleNext}\n                    >确认</Button>\n                  </Col>\n                </Row>\n              </> :\n              <>\n                <Row justify=\"space-between\">\n                  <Col span={6} className=\"input-label\">买入股票数量</Col>\n                  <Col span={4}>\n                    <InputNumber\n                      min={0}\n                      step={1}\n                      precision={0}\n                      value={buyValue}\n                      formatter={this.inputFormatter}\n                      onChange={this.onBuyInputChange}\n                    />\n                  </Col>\n                  <Col span={5}>\n                    <Button\n                      type=\"link\"\n                      block\n                      onClick={this.onBuyBtnMax}\n                    >最大值</Button>\n                  </Col>\n                  <Col span={6}>\n                    <Button\n                      type=\"primary\"\n                      block\n                      onClick={this.onBuyBtnClick}\n                    >买入</Button>\n                  </Col>\n                </Row>\n                <Row justify=\"space-between\">\n                  <Col span={6} className=\"input-label\">卖出股票数量</Col>\n                  <Col span={4}>\n                    <InputNumber\n                      min={0}\n                      step={1}\n                      precision={0}\n                      value={sellValue}\n                      formatter={this.inputFormatter}\n                      onChange={this.onSellInputChange}\n                    />\n                  </Col>\n                  <Col span={5}>\n                    <Button\n                      type=\"link\"\n                      block\n                      onClick={this.onSellBtnMax}\n                    >最大值</Button>\n                  </Col>\n                  <Col span={6}>\n                    <Button\n                      type=\"primary\"\n                      danger\n                      block\n                      onClick={this.onSellBtnClick}\n                    >卖出</Button>\n                  </Col>\n                </Row>\n                <Row justify=\"end\">\n                  <Col span={6}>\n                    <Button\n                      type=\"primary\"\n                      block\n                      onClick={this.onKeepBtnClick}\n                    >继续持有</Button>\n                  </Col>\n                </Row>\n              </>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}