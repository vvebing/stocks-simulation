{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","id","fallback","size","delay","App","document","getElementById","Login","lazy","Error","Finish","Notice","Dashboard","Preparation","Questionnaire","STOCK","A","B","C","D","E","props","login","uuid","groupID","localForage","setItem","setState","closeModal","noticed","showNotice","clearUserInfo","confirm","okText","cancelText","title","content","onOk","a","clear","trades","status","clearDashboard","removeItem","openNotice","goBack","state","error","window","location","reload","handleStart","stock","buy","sell","mood","handleNext","calcProfit","totalProfit","totalProfitRate","handleTrade","option","amount","latestData","length","updateKeys","newTrades","slice","splice","onQuestionSubmit","data","Array","from","loading","getItem","nextState","this","getExperimentStatus","active","subTitle","childComponent","backIcon","extra","type","onClick","danger","className","column","Item","label","value","suffix","visible","onCancel","PureComponent","calc","trade","total","isArray","cost","profit","position","i","averageCost","balance","marketValue","totalAsset","maxBuy","Math","floor","toFixed"],"mappings":"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","file":"static/js/main.f3f55f9d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div id=\"app\">\n      <Suspense fallback={<Spin size=\"large\" delay={100} />}>\n        <App />\n      </Suspense>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { lazy, PureComponent } from 'react';\nimport localForage from 'localforage';\nimport {\n  Button,\n  Descriptions,\n  Modal,\n  PageHeader,\n  Skeleton,\n  Statistic,\n} from 'antd';\n\nimport data from './data.json';\n\nconst Login = lazy(() => import('./Login'));\nconst Error = lazy(() => import('./Error'));\nconst Finish = lazy(() => import('./Finish'));\nconst Notice = lazy(() => import('./Notice'));\nconst Dashboard = lazy(() => import('./Dashboard'));\nconst Preparation = lazy(() => import('./Preparation'));\nconst Questionnaire = lazy(() => import('./Questionnaire'));\n\nexport const STOCK = {\n  A: '甲',\n  B: '乙',\n  C: '丙',\n  D: '丁',\n  E: '戊',\n};\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      uuid: '',\n      groupID: '',\n      noticed: false,\n      showNotice: false,\n      trades: [],\n      /**\n       * [{\n       *  stock: A | B | C | D | E,\n       *  buy: [],  // length = 21\n       *  sell: [], // length = 21\n       *  mood: [], // length = 5\n       * }]\n       */\n      status: 0,\n      error: false,\n      totalProfit: 0,\n      totalProfitRate: 0,\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const { uuid = '', groupID = '' } = await localForage.getItem('userInfo') ?? {};\n      const noticed = await localForage.getItem('noticed') ?? false;\n      const nextState = {\n        uuid,\n        groupID,\n        noticed,\n        showNotice: !noticed,\n        loading: false,\n      };\n      if (!uuid || !groupID) {\n        return this.setState(nextState);\n      }\n      const trades = await localForage.getItem('trades') ?? [];\n      const {\n        totalProfit,\n        totalProfitRate,\n      } = calcProfit(trades);\n      const status = getExperimentStatus(trades);\n      this.setState({\n        ...nextState,\n        trades,\n        status,\n        totalProfit,\n        totalProfitRate,\n      });\n    } catch (err) {\n      this.setState({\n        error: true,\n        loading: false,\n      });\n    }\n  }\n\n  login = ({ uuid, groupID }) => {\n    localForage.setItem('userInfo', {\n      uuid,\n      groupID,\n    }, () => {\n      this.setState({\n        uuid,\n        groupID,\n      });\n    });\n  }\n\n  closeModal = () => {\n    localForage.setItem('noticed', true, () => {\n      this.setState({\n        noticed: true,\n        showNotice: false,\n      });\n    });\n  }\n\n  clearUserInfo = () => {\n    Modal.confirm({\n      okText: '确定',\n      cancelText: '取消',\n      title: '是否清除用户数据？',\n      content: '清除用户数据后也将会清除实验数据！请谨慎操作！',\n      onOk: async () => {\n        await localForage.clear();\n        this.setState({\n          uuid: '',\n          groupID: '',\n          noticed: false,\n          showNotice: true,\n          trades: [],\n          status: 0,\n        });\n      },\n    });\n  }\n\n  clearDashboard = () => {\n    Modal.confirm({\n      okText: '确定',\n      cancelText: '取消',\n      title: '是否清除实验数据',\n      content: '清除实验数据后，您需要重新操作！请谨慎操作！',\n      onOk: async () => {\n        await localForage.removeItem('trades');\n        this.setState({\n          trades: [],\n          status: 0,\n        });\n      },\n    });\n  }\n\n  openNotice = () => {\n    this.setState({ showNotice: true });\n  }\n\n  goBack = async () => {\n    const { status } = this.state;\n    if (status === -1) {\n      await localForage.removeItem('trades');\n      this.setState({\n        error: false,\n        trades: [],\n        status: 0,\n      });\n    } else {\n      window.location.reload();\n    }\n  }\n\n  handleStart = (stock) => {\n    this.setState((state) => ({\n      trades: [...state.trades, {\n        stock,\n        buy: [300],\n        sell: [0],\n        mood: [],\n      }],\n      status: 1,\n    }), () => {\n      const { trades } = this.state;\n      localForage.setItem('trades', trades);\n    });\n  }\n\n  handleNext = () => {\n    const { trades } = this.state;\n    const {\n      totalProfit,\n      totalProfitRate,\n    } = calcProfit(trades);\n    this.setState({\n      status: 2,\n      totalProfit,\n      totalProfitRate,\n    });\n  }\n\n  handleTrade = (option, amount) => {\n    const { trades } = this.state;\n    const latestData = trades[trades.length - 1];\n    if (latestData) {\n      const { buy, sell, mood } = latestData;\n      if (buy.length !== sell.length) {\n        return this.setState({ status: -1 });\n      }\n      if (buy.length >= 21) {\n        if (mood.length < 5) {\n          this.setState({ status: 2 });\n        } else {\n          this.setState({ status: 3 });\n        }\n      } else {\n        const updateKeys = {};\n        if (option === 'buy') {\n          updateKeys.buy = [...buy, amount];\n          updateKeys.sell = [...sell, 0];\n        } else if (option === 'sell') {\n          updateKeys.buy = [...buy, 0];\n          updateKeys.sell = [...sell, amount];\n        } else {\n          updateKeys.buy = [...buy, 0];\n          updateKeys.sell = [...sell, 0];\n        }\n        const newTrades = trades.slice();\n        newTrades.splice(-1, 1, {\n          ...latestData,\n          ...updateKeys,\n        });\n        this.setState({\n          trades: newTrades,\n        }, () => {\n          localForage.setItem('trades', newTrades);\n        });\n      }\n    } else {\n      this.setState({ status: 0 });\n    }\n  }\n\n  onQuestionSubmit = (data) => {\n    const { trades } = this.state;\n    const latestData = trades[trades.length - 1];\n    if (!latestData) {\n      return this.setState({\n        status: -1,\n      });\n    }\n    const newTrades = trades.slice();\n    newTrades.splice(-1, 1, {\n      ...latestData,\n      mood: Array.from({ length: 5, ...data }),\n    });\n    this.setState({\n      trades: newTrades,\n      status: newTrades.length >= 5 ? 3 : 0,\n    }, () => {\n      localForage.setItem('trades', newTrades);\n    });\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      uuid,\n      groupID,\n      noticed,\n      showNotice,\n      trades,\n      status,\n      totalProfit,\n      totalProfitRate,\n     } = this.state;\n\n    if (loading) {\n      return <div id=\"skeleton\"><Skeleton active /></div>;\n    }\n\n    if (error || status === -1) {\n      return <Error status={status} goBack={this.goBack} />;\n    }\n\n    if (!uuid || !groupID) {\n      return <Login login={this.login} />;\n    }\n\n    let subTitle = '';\n    let childComponent = null;\n    switch(status) {\n      case 0: {\n        subTitle = `即将开始第${trades.length + 1}轮实验`;\n        childComponent = <Preparation trades={trades} groupID={groupID} handleStart={this.handleStart} />;\n        break;\n      }\n      case 1: {\n        subTitle = `正在进行第${trades.length}轮实验`;\n        childComponent = <Dashboard trades={trades} handleTrade={this.handleTrade} handleNext={this.handleNext} />;\n        break;\n      }\n      case 2: {\n        subTitle = `已结束第${trades.length}轮实验`;\n        childComponent = <Questionnaire onQuestionSubmit={this.onQuestionSubmit} />;\n        break;\n      }\n      case 3: {\n        subTitle = `所有实验已结束`;\n        childComponent = <Finish totalProfit={totalProfit} />;\n        break;\n      }\n      default:\n        break;\n    }\n\n    return (\n      <div id=\"main\">\n        <PageHeader\n          backIcon={false}\n          title=\"股票模拟交易实验\"\n          subTitle={subTitle}\n          extra={[\n            <Button key=\"notice\" type=\"link\" onClick={this.openNotice}>实验须知</Button>,\n            <Button key=\"userInfo\" danger type=\"primary\" onClick={this.clearUserInfo}>清除用户数据</Button>,\n            <Button key=\"trades\" danger onClick={this.clearDashboard}>清除实验数据</Button>,\n          ]}\n        >\n          <div className=\"content\">\n            <div className=\"main\">\n              <Descriptions size=\"small\" column={2}>\n                <Descriptions.Item label=\"被试编号\">\n                  {uuid}\n                </Descriptions.Item>\n                <br />\n                <Descriptions.Item label=\"分组编号\">\n                  {groupID}\n                </Descriptions.Item>\n              </Descriptions>\n            </div>\n            <div>\n              <div className=\"extra\">\n                <Statistic title=\"总累计盈亏\" value={totalProfit} suffix=\"金币\" />\n                <Statistic title=\"总盈亏率\" value={totalProfitRate} suffix=\"%\" />\n              </div>\n            </div>\n          </div>\n        </PageHeader>\n        {childComponent}\n        <Notice\n          noticed={noticed}\n          visible={showNotice}\n          onCancel={this.closeModal}\n        />\n      </div>\n    );\n  }\n}\n\n/**\n * 传入实验数据返回当前实验状态\n * @param {Array} trades 实验数据\n * @returns {(-1|0|1|2|3)} 实验状态\n */\nfunction getExperimentStatus(trades) {\n  let status;\n  const latestData = trades[trades.length - 1];\n  const {\n    buy = [],\n    sell = [],\n    mood = [],\n  } = latestData || {};\n  if (\n    !latestData || (\n      buy.length >= 21 ||\n      sell.length >= 21\n    )\n  ) {\n    if (mood.length === 0 || mood.length >= 5) {\n      if (trades.length >= 5) {\n        status = 3;\n      } else {\n        status = mood.length === 0 ? 1 : 0;\n      }\n    } else {\n      status = 2;\n    }\n  } else if (\n    buy.length < 21 &&\n    buy.length === sell.length &&\n    mood.length === 0\n  ) {\n    status = 1;\n  } else {\n    status = -1;\n  }\n  return status;\n}\n\nexport function calc(trade, total = false) {\n  const { stock, buy, sell } = trade;\n  if (\n    !stock\n    || !Array.isArray(buy)\n    || !Array.isArray(sell)\n    || (total && (buy.length < 21 || sell.length < 21))\n  ) {\n    return {};\n  }\n  let cost = 0;\n  let amount = 0;\n  let profit = 0;\n  let position = 0;\n  for (let i = 0; i < buy.length; i += 1) {\n    cost += buy[i] * (data[stock][i - 1] ?? 10);\n    amount += buy[i];\n    position += buy[i] - sell[i];\n    profit += sell[i] * (data[stock][i - 1] ?? 10);\n  }\n  const averageCost = cost / amount;\n  const balance = 5000 + profit - cost;\n  const marketValue = position * data[stock][buy.length - 1];\n  const totalAsset = balance + marketValue;\n  const totalProfit = totalAsset - 5000;\n  const maxBuy = Math.floor(balance / data[stock][buy.length - 1])\n  return {\n    averageCost,\n    position,\n    totalProfit,\n    balance,\n    marketValue,\n    totalAsset,\n    maxBuy,\n  };\n}\n\nfunction calcProfit(trades) {\n  let totalProfit = 0;\n  let totalProfitRate = 0;\n  for (let i = 0; i < trades.length; i += 1) {\n    const { totalProfit: profit = 0 } = calc(trades[i], true);\n    totalProfit += profit;\n    totalProfitRate += (totalProfit / 5000) * 100;\n  }\n  totalProfit = +totalProfit.toFixed(2);\n  totalProfitRate = totalProfitRate.toFixed(2);\n  return {\n    totalProfit,\n    totalProfitRate,\n  };\n}\n"],"sourceRoot":""}