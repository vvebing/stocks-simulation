{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Login","lazy","Error","Finish","Notice","App","props","login","uuid","groupID","localForage","setItem","setState","closeModal","noticed","showNotice","clearUserInfo","a","removeItem","clearDashboard","trades","state","loading","finish","error","getItem","nextState","this","id","active","onClick","visible","onCancel","PureComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","fallback","size","delay","document","getElementById"],"mappings":"mUAIMA,EAAQC,gBAAK,kBAAM,+DACnBC,EAAQD,gBAAK,kBAAM,uDACnBE,EAASF,gBAAK,kBAAM,uDACpBG,EAASH,gBAAK,kBAAM,+DAILI,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA4CRC,MAAQ,YAAwB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACfC,IAAYC,QAAQ,WAAY,CAC9BH,OACAC,YACC,WACD,EAAKG,SAAS,CACZJ,OACAC,gBApDa,EAyDnBI,WAAa,WACXH,IAAYC,QAAQ,WAAW,GAAM,WACnC,EAAKC,SAAS,CACZE,SAAS,EACTC,YAAY,QA7DC,EAkEnBC,cAlEmB,sBAkEH,sBAAAC,EAAA,sEACRP,IAAYQ,WAAW,YADf,uBAERR,IAAYQ,WAAW,WAFf,OAGd,EAAKN,SAAS,CACZJ,KAAM,GACNC,QAAS,GACTK,SAAS,EACTC,YAAY,IAPA,2CAlEG,EA6EnBI,eA7EmB,sBA6EF,sBAAAF,EAAA,sEACTP,IAAYQ,WAAW,UADd,OAEf,EAAKN,SAAS,CACZQ,OAAQ,KAHK,2CA3Ef,EAAKC,MAAQ,CACXC,SAAS,EACTd,KAAM,GACNC,QAAS,GACTK,SAAS,EACTC,YAAY,EACZK,OAAQ,GASRG,QAAQ,EACRC,OAAO,GAlBQ,E,2NAwB2Bd,IAAYe,QAAQ,Y,oJAAe,G,0BAArEjB,Y,MAAO,G,MAAIC,e,MAAU,G,YACPC,IAAYe,QAAQ,W,wJAAc,E,WAAlDX,E,KACAY,EAAY,CAChBlB,OACAC,UACAK,UACAC,YAAaD,EACbQ,SAAS,GAENd,GAASC,E,0CACLkB,KAAKf,SAASc,I,yBAEFhB,IAAYe,QAAQ,U,uJAAa,G,+DAEtDE,KAAKf,SAAS,CACZY,OAAO,EACPF,SAAS,I,+IA4CL,IAAD,EAUFK,KAAKN,MARRC,EAFK,EAELA,QACAE,EAHK,EAGLA,MACAhB,EAJK,EAILA,KACAC,EALK,EAKLA,QACAK,EANK,EAMLA,QACAC,EAPK,EAOLA,WAEAQ,GATK,EAQLH,OARK,EASLG,QAGF,OAAID,EACK,qBAAKM,GAAG,WAAR,SAAmB,mBAAUC,QAAM,MAGxCL,EACK,cAACtB,EAAD,IAGJM,GAASC,EAIVc,EACK,cAACpB,EAAD,IAIP,qCACE,mBAAQ2B,QAASH,KAAKX,cAAtB,kDACA,mBAAQc,QAASH,KAAKR,eAAtB,kDACA,cAACf,EAAD,CACEU,QAASA,EACTiB,QAAShB,EACTiB,SAAUL,KAAKd,gBAdZ,cAACb,EAAD,CAAOO,MAAOoB,KAAKpB,Y,GA1GC0B,iBCClBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,qBAAKjB,GAAG,MAAR,SACE,cAAC,WAAD,CAAUkB,SAAU,mBAAMC,KAAK,QAAQC,MAAO,MAA9C,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.be5c88b1.chunk.js","sourcesContent":["import React, { lazy, PureComponent } from 'react';\nimport localForage from 'localforage';\nimport { Button, Skeleton } from 'antd';\n\nconst Login = lazy(() => import('./Login'));\nconst Error = lazy(() => import('./Error'));\nconst Finish = lazy(() => import('./Finish'));\nconst Notice = lazy(() => import('./Notice'));\nconst Dashboard = lazy(() => import('./Dashboard'));\nconst Questionnaire = lazy(() => import('./Questionnaire'));\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      uuid: '',\n      groupID: '',\n      noticed: false,\n      showNotice: false,\n      trades: [],\n      /**\n       * [{\n       *  stock: A | B | C | D | E,\n       *  buy: [],  // length = 20\n       *  sell: [], // length = 20\n       *  mood: [], // length = 5\n       * }]\n       */\n      finish: false,\n      error: false,\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const { uuid = '', groupID = '' } = await localForage.getItem('userInfo') ?? {};\n      const noticed = await localForage.getItem('noticed') ?? false;\n      const nextState = {\n        uuid,\n        groupID,\n        noticed,\n        showNotice: !noticed,\n        loading: false,\n      };\n      if (!uuid || !groupID) {\n        return this.setState(nextState);\n      }\n      const trades = await localForage.getItem('trades') ?? [];\n    } catch (err) {\n      this.setState({\n        error: true,\n        loading: false,\n      });\n    }\n  }\n\n  login = ({ uuid, groupID }) => {\n    localForage.setItem('userInfo', {\n      uuid,\n      groupID,\n    }, () => {\n      this.setState({\n        uuid,\n        groupID,\n      });\n    });\n  }\n\n  closeModal = () => {\n    localForage.setItem('noticed', true, () => {\n      this.setState({\n        noticed: true,\n        showNotice: false,\n      });\n    });\n  }\n\n  clearUserInfo = async () => {\n    await localForage.removeItem('userInfo');\n    await localForage.removeItem('noticed');\n    this.setState({\n      uuid: '',\n      groupID: '',\n      noticed: false,\n      showNotice: true,\n    });\n  }\n\n  clearDashboard = async () => {\n    await localForage.removeItem('trades');\n    this.setState({\n      trades: [],\n    });\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      uuid,\n      groupID,\n      noticed,\n      showNotice,\n      trades,\n      finish,\n     } = this.state;\n\n    if (loading) {\n      return <div id=\"skeleton\"><Skeleton active /></div>;\n    }\n\n    if (error) {\n      return <Error />;\n    }\n\n    if (!uuid || !groupID) {\n      return <Login login={this.login} />;\n    }\n\n    if (finish) {\n      return <Finish />;\n    }\n\n    return (\n      <>\n        <Button onClick={this.clearUserInfo}>清除用户数据</Button>\n        <Button onClick={this.clearDashboard}>清除实验数据</Button>\n        <Notice\n          noticed={noticed}\n          visible={showNotice}\n          onCancel={this.closeModal}\n        />\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div id=\"app\">\n      <Suspense fallback={<Spin size=\"large\" delay={100} />}>\n        <App />\n      </Suspense>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}