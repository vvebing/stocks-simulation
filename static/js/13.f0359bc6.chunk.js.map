{"version":3,"sources":["Dashboard.js"],"names":["Dashboard","props","getOption","myChart","trades","latestData","length","buy","stock","next","state","option","grid","left","right","top","bottom","containLabel","title","text","STOCK","tooltip","trigger","axisPointer","type","lineStyle","width","xAxis","boundaryGap","data","Array","fill","map","_","index","yAxis","showMinLabel","showMaxLabel","min","value","parseInt","max","series","name","slice","markPoint","setOption","onBuyInputChange","setState","buyValue","onBuyBtnMax","maxBuy","onSellInputChange","sellValue","onSellBtnMax","position","onBuyBtnClick","warning","tradeConfirm","onSellBtnClick","onKeepBtnClick","amount","action","trials","handleTrade","over","confirm","centered","okText","cancelText","content","onOk","toggleNext","principal","calculate","inputFormatter","lineRef","createRef","this","echarts","getInstanceByDom","current","undefined","init","prevProps","prevState","dispose","handleNext","averageCost","currentProfit","totalProfit","balance","marketValue","totalAsset","id","bordered","column","Item","label","onClick","className","ref","justify","span","size","block","step","precision","formatter","onChange","danger","nextProps","PureComponent","calc","toFixed"],"mappings":"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","file":"static/js/13.f0359bc6.chunk.js","sourcesContent":["import React, { createRef, PureComponent } from 'react';\nimport echarts from 'echarts/lib/echarts';\nimport 'echarts/lib/chart/line';\nimport 'echarts/lib/component/title';\nimport 'echarts/lib/component/tooltip';\nimport 'echarts/lib/component/markPoint';\nimport { Button, Col, Descriptions, InputNumber, message, Modal, Row } from 'antd';\n\nimport data from './data.json';\nimport { calc, STOCK } from './App';\n\nexport default class Dashboard extends PureComponent {\n  constructor(props) {\n    super(props);\n    const { trades, principal = 5000, trials = 21 } = props;\n    const latestData = trades[trades.length - 1] || {};\n    this.state = {\n      over: latestData.buy && latestData.buy.length >= trials,\n      buyValue: 0,\n      sellValue: 0,\n      trades,\n      next: true,\n      ...calculate(trades, principal, false),\n    };\n    this.lineRef = createRef();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { trades, principal = 5000 } = nextProps;\n    if (prevState.trades !== trades) {\n      return {\n        ...calculate(trades, principal, false),\n        trades,\n      };\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    const { over } = this.state;\n    if (over) return;\n\n    this.myChart = echarts.getInstanceByDom(this.lineRef.current);\n    if (this.myChart === undefined) {\n      this.myChart = echarts.init(this.lineRef.current);\n    }\n    this.getOption();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { trades } = this.props;\n    const { next } = this.state;\n    if (trades !== prevProps.trades || next !== prevState.next) {\n      this.getOption();\n    }\n  }\n\n  componentWillUnmount() {\n    this.myChart && this.myChart.dispose();\n    this.myChart = null;\n  }\n\n  getOption = () => {\n    if (!this.myChart) return;\n    const { trades } = this.props;\n    const latestData = trades[trades.length - 1];\n    if (!latestData) return;\n    const { buy, stock } = latestData;\n    const { next } = this.state;\n\n    const option = {\n      grid: {\n        left: '0',\n        right: '10px',\n        top: '35px',\n        bottom: '0',\n        containLabel: true,\n      },\n      title: {\n        text: `${STOCK[stock]}股票走势`,\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'line',\n          lineStyle: {\n            width: 1.5,\n            type: 'dashed',\n          },\n        },\n      },\n      xAxis: {\n        boundaryGap: false,\n        data: Array(22).fill('').map((_, index) => `Point ${index}`),\n      },\n      yAxis: {\n        showMinLabel: false,\n        showMaxLabel: false,\n        min: (value) => parseInt(value.min - 1, 10),\n        max: (value) => parseInt(value.max + 2, 10),\n      },\n      series: [\n        {\n          name: '股票价格',\n          type: 'line',\n          data: data[stock].slice(3, buy.length + (next && buy.length ? 3 : 4)),\n          markPoint: {\n            data: [\n              { type: 'min', name: '最低值' },\n              { type: 'max', name: '最高值' },\n            ],\n          },\n        }\n      ],\n    };\n    this.myChart.setOption(option);\n  }\n\n  onBuyInputChange = (value) => {\n    this.setState({ buyValue: +value });\n  }\n\n  onBuyBtnMax = () => {\n    this.setState((state) => ({ buyValue: state.maxBuy }));\n  }\n\n  onSellInputChange = (value) => {\n    this.setState({ sellValue: +value });\n  }\n\n  onSellBtnMax = () => {\n    this.setState((state) => ({ sellValue: state.position }));\n  }\n\n  onBuyBtnClick = () => {\n    const { buyValue, maxBuy } = this.state;\n    if (!buyValue) return message.warning('买入数量需大于零！');\n    if (buyValue > maxBuy) {\n      this.setState({ buyValue: maxBuy });\n      return message.warning(`现金余额最多只能购买${maxBuy}股！`);\n    };\n    this.tradeConfirm('buy', buyValue, `买入${buyValue}股`);\n  }\n\n  onSellBtnClick = () => {\n    const { sellValue, position } = this.state;\n    if (!sellValue) return message.warning('卖出数量需大于零！');\n    if (sellValue > position) {\n      this.setState({ sellValue: position });\n      return message.warning(`当前持仓最多只能卖出${position}股！`);\n    }\n    this.tradeConfirm('sell', sellValue, `卖出${sellValue}股`);\n  }\n\n  onKeepBtnClick = () => {\n    this.tradeConfirm('', 0, '继续持有');\n  }\n\n  tradeConfirm = (option, amount, action) => {\n    const { trades, trials = 21, handleTrade } = this.props;\n    const latestData = trades[trades.length - 1];\n    if (latestData.buy.length >= trials) {\n      return this.setState({ over: true });\n    }\n    Modal.confirm({\n      centered: true,\n      okText: '确定',\n      cancelText: '取消',\n      title: `${action}${STOCK[latestData.stock]}股票`,\n      content: '是否确认该操作？',\n      onOk: () => {\n        this.setState({\n          buyValue: 0,\n          sellValue: 0,\n          next: true,\n        });\n        handleTrade(option, amount);\n      },\n    });\n  }\n\n  toggleNext = () => {\n    const { trades, trials = 21, principal = 5000 } = this.props;\n    const latestData = trades[trades.length - 1];\n    const over = latestData.buy.length >= trials;\n    this.setState({\n      over,\n      next: false,\n      ...calculate(trades, principal, !over),\n    });\n  }\n\n  inputFormatter = (value) => parseInt(value, 10) || 0;\n\n  render() {\n    const { trades, trials = 21, handleNext } = this.props;\n    const {\n      over,\n      next,\n      buyValue,\n      sellValue,\n      averageCost,\n      position,\n      currentProfit,\n      totalProfit,\n      balance,\n      marketValue,\n      totalAsset,\n    } = this.state;\n    const latestData = trades[trades.length - 1] ?? {};\n    const { stock, buy } = latestData;\n\n    return over ? (\n      <div id=\"dashboard\">\n        <h2>本轮交易任务结束。</h2>\n        <Descriptions bordered column={1}>\n          <Descriptions.Item label=\"成本\">{+averageCost}</Descriptions.Item>\n          <Descriptions.Item label=\"持仓\">{position}</Descriptions.Item>\n          <Descriptions.Item label=\"总盈亏\">{+totalProfit}</Descriptions.Item>\n          <Descriptions.Item label=\"现金余额\">{+balance}</Descriptions.Item>\n          <Descriptions.Item label=\"股票市值\">{+marketValue}</Descriptions.Item>\n          <Descriptions.Item label=\"总资产\">{+totalAsset}</Descriptions.Item>\n        </Descriptions>\n        <h2>{`您在本轮交易任务的累计盈亏为：${+totalProfit}金币。`}</h2>\n        <Button type=\"primary\" onClick={handleNext}>点击继续</Button>\n      </div>\n    ) : (\n      <div id=\"dashboard\">\n        <div className=\"chart\" ref={this.lineRef} />\n        <div className=\"data\">\n          <div className=\"describe\">\n            <Descriptions bordered column={1} title=\"资产配置\">\n              <Descriptions.Item label=\"当前股价\">{data[stock][buy.length + (next ? 2 : 3)]}</Descriptions.Item>\n              <Descriptions.Item label=\"成本\">{+averageCost}</Descriptions.Item>\n              <Descriptions.Item label=\"持仓\">{position}</Descriptions.Item>\n              <Descriptions.Item label=\"当前盈亏\">{+currentProfit}</Descriptions.Item>\n              <Descriptions.Item label=\"总盈亏\">{+totalProfit}</Descriptions.Item>\n              <Descriptions.Item label=\"现金余额\">{+balance}</Descriptions.Item>\n              <Descriptions.Item label=\"股票市值\">{+marketValue}</Descriptions.Item>\n              <Descriptions.Item label=\"总资产\">{+totalAsset}</Descriptions.Item>\n            </Descriptions>\n          </div>\n          <div className=\"option\">\n            {\n              next ?\n              <>\n                <Row justify=\"center\">\n                  <Col className=\"input-label\">\n                    {\n                      latestData.buy.length >= trials ?\n                      '本轮交易任务结束，点击确认查看本轮交易信息。' :\n                      '本期交易结束，请点击确认进入下一个交易期！'\n                    }\n                  </Col>\n                </Row>\n                <Row justify=\"center\">\n                  <Col span={12}>\n                    <Button\n                      type=\"primary\"\n                      size=\"large\"\n                      block\n                      onClick={this.toggleNext}\n                    >确认</Button>\n                  </Col>\n                </Row>\n              </> :\n              <>\n                <Row justify=\"space-between\">\n                  <Col span={6} className=\"input-label\">买入股票数量</Col>\n                  <Col span={4}>\n                    <InputNumber\n                      min={0}\n                      step={1}\n                      precision={0}\n                      value={buyValue}\n                      formatter={this.inputFormatter}\n                      onChange={this.onBuyInputChange}\n                    />\n                  </Col>\n                  <Col span={5}>\n                    <Button\n                      type=\"link\"\n                      block\n                      onClick={this.onBuyBtnMax}\n                    >最大值</Button>\n                  </Col>\n                  <Col span={6}>\n                    <Button\n                      type=\"primary\"\n                      block\n                      onClick={this.onBuyBtnClick}\n                    >买入</Button>\n                  </Col>\n                </Row>\n                <Row justify=\"space-between\">\n                  <Col span={6} className=\"input-label\">卖出股票数量</Col>\n                  <Col span={4}>\n                    <InputNumber\n                      min={0}\n                      step={1}\n                      precision={0}\n                      value={sellValue}\n                      formatter={this.inputFormatter}\n                      onChange={this.onSellInputChange}\n                    />\n                  </Col>\n                  <Col span={5}>\n                    <Button\n                      type=\"link\"\n                      block\n                      onClick={this.onSellBtnMax}\n                    >最大值</Button>\n                  </Col>\n                  <Col span={6}>\n                    <Button\n                      type=\"primary\"\n                      danger\n                      block\n                      onClick={this.onSellBtnClick}\n                    >卖出</Button>\n                  </Col>\n                </Row>\n                <Row justify=\"end\">\n                  <Col span={6}>\n                    <Button\n                      block\n                      className=\"keep-btn\"\n                      onClick={this.onKeepBtnClick}\n                    >持仓不变</Button>\n                  </Col>\n                </Row>\n              </>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculate(trades, principal, next) {\n  const latestData = trades[trades.length - 1];\n  const {\n    averageCost = 0,\n    position = 0,\n    totalProfit = 0,\n    balance = 0,\n    marketValue = 0,\n    totalAsset = 0,\n    maxBuy = 0,\n  } = calc(latestData, principal, next);\n  const currentProfit = (data[latestData.stock][latestData.buy.length + (next ? 3 : 2)] - averageCost) * position;\n  return {\n    averageCost: averageCost.toFixed(4),    // 加权成本\n    position,       // 持仓\n    currentProfit: currentProfit.toFixed(4),  // 当前盈亏\n    totalProfit: totalProfit.toFixed(4),    // 总盈亏\n    balance: balance.toFixed(4),        // 现金余额\n    marketValue: marketValue.toFixed(4),    // 股票市值\n    totalAsset: totalAsset.toFixed(4),     // 总资产\n    maxBuy,\n  };\n}\n"],"sourceRoot":""}